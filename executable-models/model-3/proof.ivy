#lang ivy1.7

include sort
include node
include network

# Ivy checks that the following invariants always hold if we start with the initialization state
# (i.e., `after init`) and continuously apply the exported actions below.

# We need a bunch of auxiliary invariants for the prover to avoid spurious CTIs
private {
    invariant [heard_accept_implies_accepted]
        forall SELF, OTHER, VAL. node.heard_accept(SELF, OTHER, VAL) -> node.accepted(OTHER, VAL)

    invariant [if_accept_condition_2_then_must_accept]
        forall V, VAL. node.accept_condition_2(V, VAL) -> node.accepted(V, VAL)

    invariant [confirmed_implies_there_exists_quorum_accepting_value]
        forall N, V . node.confirmed(N, V) ->
            (exists Q. node.is_quorum(Q) & node.member(N, Q) & node.heard_set_accept(N, Q, V))

    invariant [heard_quorum_accept_implies_confirmed]
        forall N1, V. (exists Q.
                node.is_quorum(Q) &
                node.member(N1, Q) &
                forall N2. (node.member(N2, Q) -> node.heard_accept(N1,N2, V))) -> node.confirmed(N1, V)
}

invariant [confirm_same_after_sufficient_messages]
    forall VAL. (exists NODE1, NODE2. node.confirmed(NODE1, VAL) & ~node.confirmed(NODE2, VAL))
        -> (exists NODE3, NODE4. node.accepted(NODE3, VAL) & ~node.heard_accept(NODE4, NODE3, VAL))

export network.deliver_vote
export network.deliver_accept
export node.vote
