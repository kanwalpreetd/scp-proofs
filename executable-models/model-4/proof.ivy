#lang ivy1.7

include sort
include node
include network

# Ivy checks that the following invariants always hold if we start with the initialization state
# (i.e., `after init`) and continuously apply the exported actions below.

# We need a bunch of auxiliary invariants for the prover to avoid spurious CTIs
private {
    # NOTE: In this specific model, all well behaved nodes are intact and intertwined.
    # They are not generally true, so some of the invariants here will not hold in general.
    invariant [heard_vote_implies_voted]
        forall SELF, OTHER, VAL. (node.well_behaved(SELF) & node.well_behaved(OTHER) & node.heard_vote(SELF, OTHER, VAL)) -> node.voted(OTHER, VAL)

    invariant [heard_accept_implies_accepted]
        forall SELF, OTHER, VAL. (node.well_behaved(SELF) & node.well_behaved(OTHER) & node.heard_accept(SELF, OTHER, VAL)) -> node.accepted(OTHER, VAL)

    invariant [accept_means_at_least_one_vote]
        forall SELF, VAL. (node.well_behaved(SELF) & node.accepted(SELF, VAL)) -> (exists NODE. node.well_behaved(NODE) & node.voted(NODE, VAL))

    invariant [if_accept_condition_2_then_must_accept]
        forall V, VAL. (node.well_behaved(V) & node.accept_condition_2(V, VAL)) -> node.accepted(V, VAL)

    invariant [confirmed_implies_there_exists_quorum_accepting_value]
        forall N, V . (node.well_behaved(N) & node.confirmed(N, V)) ->
            (exists Q. node.is_quorum(Q) & node.member(N, Q) & node.heard_set_accept(N, Q, V))

    invariant [heard_quorum_accept_implies_confirmed]
        forall N1, V. (node.well_behaved(N1) &
                       (exists Q. node.is_quorum(Q) & node.member(N1, Q) &
                        forall N2. (node.member(N2, Q) -> node.heard_accept(N1,N2, V))))
                    -> node.confirmed(N1, V)
}

invariant [confirm_same_after_sufficient_messages]
    forall VAL. (exists NODE1, NODE2. node.well_behaved(NODE1) & node.well_behaved(NODE2) & node.confirmed(NODE1, VAL) & ~node.confirmed(NODE2, VAL))
        -> (exists NODE3, NODE4. node.well_behaved(NODE3) & node.well_behaved(NODE4) & node.accepted(NODE3, VAL) & ~node.heard_accept(NODE4, NODE3, VAL))

export network.deliver_vote
export network.deliver_accept
export node.vote
export node.byzantine_step
