#lang ivy1.7

include sort
include node
include network

# Ivy checks that the following invariants always hold if we start with the initialization state
# (i.e., `after init`) and continuously apply the exported actions below.

# We need a bunch of auxiliary invariants for the prover to avoid spurious CTIs
private {
    invariant [heard_vote_implies_voted]
        forall SELF, OTHER, VAL. (node.intact(SELF) & node.intact(OTHER) & node.heard_vote(SELF, OTHER, VAL)) -> node.voted(OTHER, VAL)

    invariant [heard_accept_implies_accepted]
        forall SELF, OTHER, VAL. (node.intact(SELF) & node.intact(OTHER) & node.heard_accept(SELF, OTHER, VAL)) -> node.accepted(OTHER, VAL)

    invariant [if_node_is_ready_to_accept_it_must_accept]
        forall NODE. (node.intact(NODE) -> forall VAL. ~node.ready_to_accept_but_have_not_accepted(NODE, VAL))

    invariant [if_node_is_ready_to_confirm_it_must_confirm]
        forall NODE. (node.intact(NODE) -> forall VAL. ~node.ready_to_confirm_but_have_not_confirmed(NODE, VAL))

    relation heard_my_quorum_accept(N:id_t, V:val_t)
    definition heard_my_quorum_accept(N, V) =
        exists Q. node.is_quorum(Q) & node.member(N, Q) & node.heard_set_accept(N, Q, V)

    invariant [confirmed_implies_there_exists_quorum_accepting_value]
        forall N, V . (node.intact(N) & node.confirmed(N, V)) ->
            heard_my_quorum_accept(N, V)
}

invariant [confirm_same_after_sufficient_messages]
    forall VAL. (exists NODE1, NODE2. node.intact(NODE1) & node.intact(NODE2) & node.confirmed(NODE1, VAL) & ~node.confirmed(NODE2, VAL))
        -> (exists NODE3, NODE4. node.intact(NODE3) & node.intact(NODE4) & node.accepted(NODE3, VAL) & ~node.heard_accept(NODE4, NODE3, VAL))

export network.deliver_vote
export network.deliver_accept
export node.vote
export node.byzantine_step
